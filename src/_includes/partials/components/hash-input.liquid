<div x-data="svgRingDemo" class="border-4 bg-white border-black p-8  drop-shadow-hard">
  <label>
    <h3 class="font-black mt-0">Pre-Image:</h3>
    <input
      class="bg-gray-200 p-1 border-b border-black w-full"
      x-model="preimage"
      type="text">
  </label>
    <div class="break-words">
      <h3 class="font-black">SHA256 Hash:</h3>
      <p class="font-mono break-words w-fit max-w-[100%] mx-auto" x-text="await hash(preimage)"></p>
    </div>

  {% if color %}

  Which can be represented by the following hex codes: 
    <div class="flex flex-wrap">
      <template x-for="hexColor in translatePubKeyHexColors(await hash(preimage))">
        <div class="max-w-[100%] mx-auto flex flex-col">
          <div x-text="'#' + hexColor"></div>
          <div class="h-4" :style="'background: #' + hexColor"></div>
        </div>
      </template>
  </div>

{% endif %}

{% if svg %}

<h3 class="font-black"> SVG Fingerprint: </h3>
  <div class="sm:w-3/4 md:w-2/3 xl:w-1/3 mx-auto" x-html="translatePubKeyToSvgRing(await hash(preimage)).outerHTML">
  </div>

{% endif %}
</div>
<script>
  function svgRingDemo() {
    return { 
      preimage: '{{ preimage }}',
      hash: async function sha256(message) {
        const msgBuffer = new TextEncoder().encode(message);                    
        const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);
        const hashArray = Array.from(new Uint8Array(hashBuffer));             
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        return hashHex;
      },
      translatePubKeyHexColors(pubkey) {
          if (!(/\b[0-9A-Fa-f]{64}\b/).test(pubkey)) {
              return;
          }
          const hexvalues = pubkey.split('').reduce((accumulator, currentValue, currentIndex) => {
              if (currentIndex % 6 === 0) {
                  accumulator[currentIndex / 6] = '';
              }
              accumulator[Math.floor(currentIndex / 6)] += currentValue;
              return accumulator;
          }, []);
          return hexvalues;
      },
      translatePubKeyToSvgRing(pubkey) {
        const hexValues = this.translatePubKeyHexColors(pubkey);
        if (!hexValues)
            return;
        const profileFingerprint = document.createElement('svg');
        profileFingerprint.setAttribute('width', '100%');
        profileFingerprint.setAttribute('height', '100%');
        profileFingerprint.setAttribute('viewBox', '0 0 42 42');
        hexValues.forEach((hex, i) => {
            const circle = document.createElement('circle');
            circle.setAttribute('stroke', '#' + hex);
            circle.setAttribute('stroke-width', '4');
            circle.setAttribute('r', '15.91549430918954');
            circle.setAttribute('cx', '21');
            circle.setAttribute('cy', '21');
            const offset = Math.floor(100 / hexValues.length);
            circle.setAttribute('stroke-dasharray', `${i + 1 !== hexValues.length ? offset : 10} ${i + 1 !== hexValues.length ? 100 - offset : 89}`);
            circle.setAttribute('stroke-dashoffset', `${offset * i}`);
            profileFingerprint.appendChild(circle);
        });
        return profileFingerprint;
      }
    }
  }
</script>